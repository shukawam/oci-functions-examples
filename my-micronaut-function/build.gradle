plugins {
    id("com.github.johnrengelman.shadow") version "7.1.1"
    id("io.micronaut.application") version "3.2.2"
}

version = "0.1"
group = "my.micronaut.function"

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("org.slf4j:slf4j-simple")
    implementation("io.micronaut:micronaut-validation")

    implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-function")

    implementation("com.fnproject.fn:api")

    runtimeOnly("com.fnproject.fn:runtime")

    testImplementation("com.fnproject.fn:testing-junit4")

    testImplementation("io.micronaut:micronaut-http-client")

}


application {
    mainClass.set("com.fnproject.fn.runtime.EntryPoint")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

tasks {
    dockerfileNative {
        args("-XX:MaximumHeapSizePercent=80")
        buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
        defaultCommand.set("my.micronaut.function.Function::handleRequest")
    }

    dockerfile {
        buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
        defaultCommand.set("my.micronaut.function.Function::handleRequest")
    }
    dockerBuild {
        images = ["nrt.ocir.io/orasejapan/fn/$project.name:$project.version"]
    }

    dockerBuildNative {
        images = ["nrt.ocir.io/orasejapan/fn/$project.name-native:$project.version"]
    }
}
graalvmNative.toolchainDetection = false
graalvmNative {
    binaries.configureEach {
        buildArgs.addAll(
             "-H:+StaticExecutableWithDynamicLibC",
             "-Dfn.handler=my.micronaut.function.Function::handleRequest",
             "--initialize-at-build-time=my.micronaut.function"
        )
    }
}
tasks.named("assemble") {
    dependsOn(":shadowJar")
}
micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("my.micronaut.function.*")
    }
}


